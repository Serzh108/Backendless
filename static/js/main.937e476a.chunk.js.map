{"version":3,"sources":["components/Button/Button.module.css","components/Device/Device.module.css","components/Button/Button.js","helpers/constants/constants.js","helpers/calc.js","components/Device/Device.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","Button","value","clickHandler","id","className","styles","btn","onClick","path","mdiBackspaceOutline","size","horizontal","vertical","rotate","color","KEY_ARRAY","ACTIONS_TYPE","ACTIONS","a","b","calc","data","console","log","digitArr","actionArr","dataString","join","length","parsedDigit","Number","parseInt","push","numberToString","toString","numberLength","substring","forEach","type","multiplay","indexOf","tempResult","splice","makeOperation","initialState","Device","useState","state","setState","result","setResult","isResult","setIsResult","keyboardHandler","e","currentKey","key","symbolHandler","useEffect","document","addEventListener","removeEventListener","currentSymbol","currentTarget","isNaN","ress","newValue","res","prev","container","screen","firstLine","secondLine","keyboard","map","item","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.937e476a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"Button_btn__1-Bn6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Device_container__GbXmR\",\"screen\":\"Device_screen__AL8UP\",\"firstLine\":\"Device_firstLine__3ADMh\",\"secondLine\":\"Device_secondLine__2vjOu\",\"keyboard\":\"Device_keyboard__3AtNb\"};","import React from 'react';\r\nimport Icon from '@mdi/react';\r\nimport { mdiBackspaceOutline } from '@mdi/js';\r\nimport styles from './Button.module.css';\r\n\r\nfunction Button({ value, clickHandler }) {\r\n  return (\r\n    <div id={value} className={styles.btn} onClick={clickHandler}>\r\n      <p>\r\n        {value !== 'x' ? (\r\n          value\r\n        ) : (\r\n          <Icon\r\n            path={mdiBackspaceOutline}\r\n            size={1}\r\n            horizontal\r\n            vertical\r\n            rotate={180}\r\n            color=\"#333\"\r\n          />\r\n        )}\r\n      </p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Button;\r\n","const KEY_ARRAY = [\r\n  'AC',\r\n  'x',\r\n  '%',\r\n  '/',\r\n  7,\r\n  8,\r\n  9,\r\n  '*',\r\n  4,\r\n  5,\r\n  6,\r\n  '-',\r\n  1,\r\n  2,\r\n  3,\r\n  '+',\r\n  '.',\r\n  0,\r\n  '=',\r\n];\r\n\r\n// const ACTIONS_TYPE = ['*', '/', '+', '-'];\r\nconst ACTIONS_TYPE = ['*', '/', '+'];\r\n\r\nconst multiplayAction = (a, b) => a * b;\r\nconst divisionAction = (a, b) => a / b;\r\nconst additionAction = (a, b) => a + b;\r\n// const subtractionAction = (a, b) => a - b;\r\n\r\nconst ACTIONS = {\r\n  '*': multiplayAction,\r\n  '/': divisionAction,\r\n  '+': additionAction,\r\n  // '-': subtractionAction,\r\n};\r\n\r\nexport { KEY_ARRAY, ACTIONS_TYPE, ACTIONS };\r\n","import { ACTIONS_TYPE, ACTIONS } from './constants/constants';\r\n\r\nconst makeOperation = (type, actionArr, digitArr) => {\r\n  let multiplay = actionArr.indexOf(type);\r\n  while (multiplay >= 0) {\r\n    console.log(`${type} present!!! on: `, multiplay);\r\n    const tempResult = ACTIONS[type](\r\n      digitArr[multiplay],\r\n      digitArr[multiplay + 1],\r\n    );\r\n    console.log(`${type} tempResult : `, tempResult);\r\n    digitArr.splice(multiplay, 2, tempResult);\r\n    console.log('digitArr : ', digitArr);\r\n    // ------\r\n    actionArr.splice(multiplay, 1);\r\n    console.log(`${type} actionArr: `, actionArr);\r\n    multiplay = actionArr.indexOf(type);\r\n  }\r\n  console.log(`no ${type} action!!!`);\r\n};\r\n\r\nconst calc = data => {\r\n  console.log('calc:', data);\r\n  const digitArr = [];\r\n  const actionArr = [];\r\n  let dataString = data.join('');\r\n  while (dataString.length > 0) {\r\n    const parsedDigit = Number.parseInt(dataString, 10);\r\n    // const parsedDigit = Number.parseFloat(dataString);\r\n    // if (parsedDigit) digitArr.push(parsedDigit);  ?? надо ли проверку\r\n    digitArr.push(parsedDigit);\r\n    const numberToString = parsedDigit.toString();\r\n    const numberLength = numberToString.length;\r\n    console.log('operation :', dataString[numberLength]);\r\n    if (dataString[numberLength] === '-') {\r\n      actionArr.push('+');\r\n      dataString = dataString.substring(numberLength);\r\n    } else {\r\n      dataString[numberLength] && actionArr.push(dataString[numberLength]);\r\n      dataString = dataString.substring(numberLength + 1);\r\n    }\r\n    console.log(\r\n      'parsedDigit = ',\r\n      parsedDigit,\r\n      ' numberToString = ',\r\n      numberToString,\r\n      ' numberLength = ',\r\n      numberLength,\r\n    );\r\n  }\r\n  console.log('digitArr = ', digitArr);\r\n  console.log('actionArr = ', actionArr);\r\n\r\n  ACTIONS_TYPE.forEach(type => makeOperation(type, actionArr, digitArr));\r\n  return digitArr[0];\r\n};\r\n\r\nexport default calc;\r\n","import React, { useState, useEffect } from 'react';\r\nimport Button from '../Button/Button';\r\nimport calc from '../../helpers/calc';\r\nimport { KEY_ARRAY } from '../../helpers/constants/constants';\r\nimport styles from './Device.module.css';\r\n\r\nconst initialState = [];\r\nconst initialResult = 0;\r\n\r\nfunction Device() {\r\n  const [state, setState] = useState(initialState);\r\n  const [result, setResult] = useState(initialResult);\r\n  const [isResult, setIsResult] = useState(false);\r\n\r\n  const keyboardHandler = e => {\r\n    const currentKey = e.key;\r\n    // console.log('key pressed :', currentKey, ' ', e);\r\n    symbolHandler(currentKey);\r\n  };\r\n\r\n  useEffect(() => {\r\n    // const keyboardHandler = e => {\r\n    //   const currentKey = e.key;\r\n    //   console.log('key pressed :', currentKey);\r\n    //   symbolHandler(currentKey);\r\n    // };\r\n    // 'keypress' 'keydown'\r\n    document.addEventListener('keypress', keyboardHandler);\r\n    return () => {\r\n      document.removeEventListener('keypress', keyboardHandler);\r\n    };\r\n  }, [keyboardHandler]);\r\n\r\n  const clickHandler = e => {\r\n    const currentSymbol = e.currentTarget.id;\r\n    console.log('click:', currentSymbol);\r\n    symbolHandler(currentSymbol);\r\n    // if (isNaN(currentSymbol)) {\r\n    //   console.log('currentSymbol is not a number!', currentSymbol);\r\n    //   console.log(\r\n    //     `state = ${state} state.length = ${state.length}\r\n    //        state.length - 1 = ${state[state.length - 1]}`,\r\n    //   );\r\n    //   setIsResult(false);\r\n    //   // --- press dot or perсent ('.' or '%') !!! TEMP ---\r\n    //   if (currentSymbol === '.' || currentSymbol === '%') {\r\n    //     return;\r\n    //   }\r\n    //   // --- /press dot or perсent ('.' or '%') !!! TEMP ---\r\n    //   // --- first item ---\r\n    //   if (state.length === 0 && !isResult) {\r\n    //     currentSymbol === '-' && setState([currentSymbol]);\r\n    //     return;\r\n    //   }\r\n    //   // --- /first item ---\r\n    //   // --- del last ---\r\n    //   if (currentSymbol === 'x') {\r\n    //     const newValue = [...state];\r\n    //     newValue.length = newValue.length - 1;\r\n    //     setState(newValue);\r\n    //     return;\r\n    //   }\r\n    //   // --- /del last ---\r\n    //   // --- clear ---\r\n    //   if (currentSymbol === 'AC') {\r\n    //     console.log('\"AC\" pressed!!');\r\n    //     setState(initialState);\r\n    //     setResult(initialResult);\r\n    //     setIsResult(false);\r\n    //     return;\r\n    //   }\r\n    //   // --- /clear ---\r\n    //   // --- calc ---\r\n    //   if (currentSymbol === '=') {\r\n    //     if (isNaN(state[state.length - 1])) return;\r\n    //     console.log('\" =\" pressed!!');\r\n    //     const result = calc(state);\r\n    //     console.log('result = ', result);\r\n    //     // setState(initialState);\r\n    //     // setResult(result);\r\n    //     setState([`${result}`]);\r\n    //     setResult(initialResult);\r\n    //     setIsResult(true);\r\n    //     return;\r\n    //   }\r\n    //   // --- /calc ---\r\n    //   // --- first is '-' ---\r\n    //   if (state.length === 1 && state[0] === '-') {\r\n    //     return;\r\n    //   }\r\n    //   // --- first is '-' ---\r\n    //   // --- replace last NaN symbol ---\r\n    //   if (isNaN(state[state.length - 1])) {\r\n    //     let newValue = [...state];\r\n    //     console.log('newValue = ', newValue);\r\n    //     newValue[newValue.length - 1] = currentSymbol;\r\n    //     console.log('???? newValue = ', newValue);\r\n    //     setState(newValue);\r\n    //     // --- /replace last NaN symbol ---\r\n    //   } else setState(prev => [...prev, currentSymbol]);\r\n    // } else {\r\n    //   console.log('currentSymbol is number', currentSymbol);\r\n    //   if (isResult) {\r\n    //     setIsResult(false);\r\n    //     setState([`${currentSymbol}`]);\r\n    //   } else {\r\n    //     setState(prev => [...prev, currentSymbol]);\r\n    //   }\r\n    // }\r\n  };\r\n\r\n  const symbolHandler = currentSymbol => {\r\n    if (isNaN(currentSymbol)) {\r\n      console.log('currentSymbol is not a number!', currentSymbol);\r\n      console.log(\r\n        `state = ${state} state.length = ${state.length}\r\n           state.length - 1 = ${state[state.length - 1]}`,\r\n      );\r\n      setIsResult(false);\r\n      // ------------- ??? ----------\r\n      const ress = calc(state);\r\n      console.log('!!! NEW result = ', ress);\r\n      // setState(initialState);\r\n      // setResult(result);\r\n      // setState([`${ress}`]);\r\n      setResult(ress);\r\n      // ------------- /??? ----------\r\n      switch (currentSymbol) {\r\n        case '.':\r\n        case '%':\r\n          return;\r\n\r\n        case 'x':\r\n          const newValue = [...state];\r\n          newValue.length = newValue.length - 1;\r\n          setState(newValue);\r\n          return;\r\n\r\n        case 'AC':\r\n          console.log('\"AC\" pressed!!');\r\n          setState(initialState);\r\n          setResult(initialResult);\r\n          setIsResult(false);\r\n          return;\r\n\r\n        case '=':\r\n          if (isNaN(state[state.length - 1])) return;\r\n          console.log('\" =\" pressed!!');\r\n          let res = calc(state);\r\n          // res = res === Infinity || res === -Infinity ? 'ERROR' : res;\r\n          setState([`${res}`]);\r\n          setResult(initialResult);\r\n          setIsResult(true);\r\n          return;\r\n\r\n        default:\r\n          break;\r\n      }\r\n\r\n      // --- first item ---\r\n      if (state.length === 0 && !isResult) {\r\n        currentSymbol === '-' && setState([currentSymbol]);\r\n        return;\r\n      }\r\n      // --- /first item ---\r\n      // --- first is '-' ---\r\n      if (state.length === 1 && state[0] === '-') {\r\n        return;\r\n      }\r\n      // --- first is '-' ---\r\n      // --- replace last NaN symbol ---\r\n      if (isNaN(state[state.length - 1])) {\r\n        let newValue = [...state];\r\n        console.log('newValue = ', newValue);\r\n        newValue[newValue.length - 1] = currentSymbol;\r\n        console.log('???? newValue = ', newValue);\r\n        setState(newValue);\r\n        // --- /replace last NaN symbol ---\r\n      } else setState(prev => [...prev, currentSymbol]);\r\n    } else {\r\n      console.log('currentSymbol is number', currentSymbol);\r\n      if (isResult) {\r\n        setIsResult(false);\r\n        setState([`${currentSymbol}`]);\r\n      } else {\r\n        setState(prev => [...prev, currentSymbol]);\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={styles.container}>\r\n      <div className={styles.screen}>\r\n        <p className={styles.firstLine}>{state.join('')}</p>\r\n        {!isResult && <p className={styles.secondLine}>{result}</p>}\r\n      </div>\r\n      <div className={styles.keyboard}>\r\n        {KEY_ARRAY.map(item => (\r\n          <Button key={item} value={item} clickHandler={clickHandler} />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Device;\r\n","import React from 'react';\nimport Device from './components/Device/Device';\nimport './styles/App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Device />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}